services:
  database:
    image: postgres:13-alpine
    container_name: database
    restart: unless-stopped
    networks:
      - owl-network
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - "${DATABASE_HOST_DIRECTORY}:/var/lib/postgresql/data"
      - ./host/database:/host
    working_dir: /host
    labels:
      - "traefik.enable=false"

  fusionauth:
    image: fusionauth/fusionauth-app:latest
    container_name: fusionauth
    restart: unless-stopped
    networks:
      - owl-network
    ports:
      - "${FUSIONAUTH_PORT}:9011"
    environment:
      - DATABASE_URL=jdbc:postgresql://database:5432/fusionauth
      - DATABASE_ROOT_USERNAME=${DBADMIN_USER}
      - DATABASE_ROOT_PASSWORD=${DBADMIN_PASSWORD}
      - DATABASE_USERNAME=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - FUSIONAUTH_APP_MEMORY
      - FUSIONAUTH_APP_RUNTIME_MODE=development
      - FUSIONAUTH_APP_URL=${AUTH_ORIGIN_EXTERNAL}
      - SEARCH_TYPE=database
    depends_on:
      - database
    labels:
      - "traefik.http.routers.auth.rule=Host(`auth.owlbear.tech`) && PathPrefix(`/`)"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.services.auth.loadbalancer.server.port=9011"

  hasura:
    image: hasura/graphql-engine:v2.0.7
    container_name: hasura
    restart: unless-stopped
    ports:
      - "${HASURA_CONSOLE_PORT}:8080"
    networks:
      - owl-network
    environment:
      - DATABASE_URL
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
      - HASURA_GRAPHQL_DEV_MODE=true
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_METADATA_DATABASE_URL=${HASURA_METADATA_DB}
    depends_on:
      - database
    labels:
      - "traefik.http.middlewares.hasura-path.replacepath.path=/v1/graphql"
      - "traefik.http.routers.hasura.middlewares=hasura-path"
      - "traefik.http.routers.hasura.rule=Path(`/api/graphql`)"
      - "traefik.http.routers.hasura.tls=true"

  # https://github.com/Tecnativa/docker-socket-proxy
  soxy:
    image: tecnativa/docker-socket-proxy
    container_name: soxy
    networks:
      - soxy-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
    labels:
      - "traefik.enable=false"

  traefik:
    image: traefik:2.4
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    volumes:
      - ./traefik:/etc/traefik
      - ./host/traefik:/host
    networks:
      - owl-network
      - soxy-net
    depends_on:
      - soxy
      - webapp
    labels:
      - "traefik.enable=false"

  webapp:
    image: alexgs99/node:2
    container_name: webapp
    restart: unless-stopped
    ports:
      - "${PRISMA_STUDIO_PORT}:5555"
    volumes:
      - .:/bare-owls
    working_dir: /bare-owls/webapp
    networks:
      - owl-network
    environment:
      - AUTH_CLIENT_ID
      - AUTH_CLIENT_SECRET
      - AUTH_ORIGIN_EXTERNAL
      - AUTH_ORIGIN_INTERNAL
      - AUTH_PATH_DISCOVERY
      - COOKIE_ACCESS_TOKEN_TTL
      - COOKIE_REFRESH_TOKEN_TTL
      - COOKIE_VERIFY_TTL
      - DATABASE_URL
      - IRON_CURRENT_PWD
      - IRON_PASSWORDS
      - IRON_SEAL_TTL
      - WEBAPP_BASE_URL
      - WEBAPP_PORT
    command: npm run dev
    depends_on:
      - database
    labels:
      - "traefik.http.routers.webapp.rule=PathPrefix(`/`)"
      - "traefik.http.routers.webapp.tls=true"
      - "traefik.http.services.webapp.loadbalancer.server.port=${WEBAPP_PORT}"

networks:
  owl-network:
    driver: bridge
    name: owl-network
  soxy-net:
    driver: bridge
    driver_opts:
      encrypted: 'true' # We're passing Docker socket stuff over TCP, so encrypt
    name: soxy-net
