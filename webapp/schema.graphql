schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "user_blocks"
"""
type blocklists {
  """An object relationship"""
  blocker: users!
  blocker_id: uuid!
  created_at: timestamp!
  id: Int!

  """An object relationship"""
  target: users!
  target_id: uuid!
  updated_at: timestamp!
}

"""
aggregated selection of "user_blocks"
"""
type blocklists_aggregate {
  aggregate: blocklists_aggregate_fields
  nodes: [blocklists!]!
}

"""
aggregate fields of "user_blocks"
"""
type blocklists_aggregate_fields {
  avg: blocklists_avg_fields
  count(columns: [blocklists_select_column!], distinct: Boolean): Int!
  max: blocklists_max_fields
  min: blocklists_min_fields
  stddev: blocklists_stddev_fields
  stddev_pop: blocklists_stddev_pop_fields
  stddev_samp: blocklists_stddev_samp_fields
  sum: blocklists_sum_fields
  var_pop: blocklists_var_pop_fields
  var_samp: blocklists_var_samp_fields
  variance: blocklists_variance_fields
}

"""
order by aggregate values of table "user_blocks"
"""
input blocklists_aggregate_order_by {
  avg: blocklists_avg_order_by
  count: order_by
  max: blocklists_max_order_by
  min: blocklists_min_order_by
  stddev: blocklists_stddev_order_by
  stddev_pop: blocklists_stddev_pop_order_by
  stddev_samp: blocklists_stddev_samp_order_by
  sum: blocklists_sum_order_by
  var_pop: blocklists_var_pop_order_by
  var_samp: blocklists_var_samp_order_by
  variance: blocklists_variance_order_by
}

"""
input type for inserting array relation for remote table "user_blocks"
"""
input blocklists_arr_rel_insert_input {
  data: [blocklists_insert_input!]!

  """on conflict condition"""
  on_conflict: blocklists_on_conflict
}

"""aggregate avg on columns"""
type blocklists_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "user_blocks"
"""
input blocklists_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "user_blocks". All fields are combined with a logical 'AND'.
"""
input blocklists_bool_exp {
  _and: [blocklists_bool_exp!]
  _not: blocklists_bool_exp
  _or: [blocklists_bool_exp!]
  blocker: users_bool_exp
  blocker_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  id: Int_comparison_exp
  target: users_bool_exp
  target_id: uuid_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "user_blocks"
"""
enum blocklists_constraint {
  """unique or primary key constraint"""
  user_block_pk
}

"""
input type for incrementing numeric columns in table "user_blocks"
"""
input blocklists_inc_input {
  id: Int
}

"""
input type for inserting data into table "user_blocks"
"""
input blocklists_insert_input {
  blocker: users_obj_rel_insert_input
  blocker_id: uuid
  created_at: timestamp
  id: Int
  target: users_obj_rel_insert_input
  target_id: uuid
  updated_at: timestamp
}

"""aggregate max on columns"""
type blocklists_max_fields {
  blocker_id: uuid
  created_at: timestamp
  id: Int
  target_id: uuid
  updated_at: timestamp
}

"""
order by max() on columns of table "user_blocks"
"""
input blocklists_max_order_by {
  blocker_id: order_by
  created_at: order_by
  id: order_by
  target_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type blocklists_min_fields {
  blocker_id: uuid
  created_at: timestamp
  id: Int
  target_id: uuid
  updated_at: timestamp
}

"""
order by min() on columns of table "user_blocks"
"""
input blocklists_min_order_by {
  blocker_id: order_by
  created_at: order_by
  id: order_by
  target_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "user_blocks"
"""
type blocklists_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blocklists!]!
}

"""
on conflict condition type for table "user_blocks"
"""
input blocklists_on_conflict {
  constraint: blocklists_constraint!
  update_columns: [blocklists_update_column!]! = []
  where: blocklists_bool_exp
}

"""Ordering options when selecting data from "user_blocks"."""
input blocklists_order_by {
  blocker: users_order_by
  blocker_id: order_by
  created_at: order_by
  id: order_by
  target: users_order_by
  target_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: blocklists"""
input blocklists_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_blocks"
"""
enum blocklists_select_column {
  """column name"""
  blocker_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  target_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "user_blocks"
"""
input blocklists_set_input {
  blocker_id: uuid
  created_at: timestamp
  id: Int
  target_id: uuid
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type blocklists_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "user_blocks"
"""
input blocklists_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type blocklists_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "user_blocks"
"""
input blocklists_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type blocklists_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "user_blocks"
"""
input blocklists_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type blocklists_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "user_blocks"
"""
input blocklists_sum_order_by {
  id: order_by
}

"""
update columns of table "user_blocks"
"""
enum blocklists_update_column {
  """column name"""
  blocker_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  target_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type blocklists_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "user_blocks"
"""
input blocklists_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type blocklists_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "user_blocks"
"""
input blocklists_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type blocklists_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "user_blocks"
"""
input blocklists_variance_order_by {
  id: order_by
}

"""
columns and relationships of "channels"
"""
type channels {
  created_at: timestamp!
  id: uuid!

  """An object relationship"""
  owner: users!
  owner_id: uuid!

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!
  slug: String!

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """
  fetch data from the table: "channel_tiers"
  """
  tiers(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): [tiers!]!

  """An aggregate relationship"""
  tiers_aggregate(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): tiers_aggregate!
  title: String!
  updated_at: timestamp!
}

"""
aggregated selection of "channels"
"""
type channels_aggregate {
  aggregate: channels_aggregate_fields
  nodes: [channels!]!
}

"""
aggregate fields of "channels"
"""
type channels_aggregate_fields {
  count(columns: [channels_select_column!], distinct: Boolean): Int!
  max: channels_max_fields
  min: channels_min_fields
}

"""
order by aggregate values of table "channels"
"""
input channels_aggregate_order_by {
  count: order_by
  max: channels_max_order_by
  min: channels_min_order_by
}

"""
input type for inserting array relation for remote table "channels"
"""
input channels_arr_rel_insert_input {
  data: [channels_insert_input!]!

  """on conflict condition"""
  on_conflict: channels_on_conflict
}

"""
Boolean expression to filter rows from the table "channels". All fields are combined with a logical 'AND'.
"""
input channels_bool_exp {
  _and: [channels_bool_exp!]
  _not: channels_bool_exp
  _or: [channels_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  owner: users_bool_exp
  owner_id: uuid_comparison_exp
  posts: posts_bool_exp
  slug: String_comparison_exp
  subscriptions: subscriptions_bool_exp
  tiers: tiers_bool_exp
  title: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "channels"
"""
enum channels_constraint {
  """unique or primary key constraint"""
  channels_owner_id_unique

  """unique or primary key constraint"""
  channels_pk

  """unique or primary key constraint"""
  channels_slug_key
}

"""
input type for inserting data into table "channels"
"""
input channels_insert_input {
  created_at: timestamp
  id: uuid
  owner: users_obj_rel_insert_input
  owner_id: uuid
  posts: posts_arr_rel_insert_input
  slug: String
  subscriptions: subscriptions_arr_rel_insert_input
  tiers: tiers_arr_rel_insert_input
  title: String
  updated_at: timestamp
}

"""aggregate max on columns"""
type channels_max_fields {
  created_at: timestamp
  id: uuid
  owner_id: uuid
  slug: String
  title: String
  updated_at: timestamp
}

"""
order by max() on columns of table "channels"
"""
input channels_max_order_by {
  created_at: order_by
  id: order_by
  owner_id: order_by
  slug: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type channels_min_fields {
  created_at: timestamp
  id: uuid
  owner_id: uuid
  slug: String
  title: String
  updated_at: timestamp
}

"""
order by min() on columns of table "channels"
"""
input channels_min_order_by {
  created_at: order_by
  id: order_by
  owner_id: order_by
  slug: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "channels"
"""
type channels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [channels!]!
}

"""
input type for inserting object relation for remote table "channels"
"""
input channels_obj_rel_insert_input {
  data: channels_insert_input!

  """on conflict condition"""
  on_conflict: channels_on_conflict
}

"""
on conflict condition type for table "channels"
"""
input channels_on_conflict {
  constraint: channels_constraint!
  update_columns: [channels_update_column!]! = []
  where: channels_bool_exp
}

"""Ordering options when selecting data from "channels"."""
input channels_order_by {
  created_at: order_by
  id: order_by
  owner: users_order_by
  owner_id: order_by
  posts_aggregate: posts_aggregate_order_by
  slug: order_by
  subscriptions_aggregate: subscriptions_aggregate_order_by
  tiers_aggregate: tiers_aggregate_order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: channels"""
input channels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "channels"
"""
enum channels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  owner_id

  """column name"""
  slug

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "channels"
"""
input channels_set_input {
  created_at: timestamp
  id: uuid
  owner_id: uuid
  slug: String
  title: String
  updated_at: timestamp
}

"""
update columns of table "channels"
"""
enum channels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  owner_id

  """column name"""
  slug

  """column name"""
  title

  """column name"""
  updated_at
}

"""
columns and relationships of "user_emails"
"""
type emails {
  """An object relationship"""
  account: users!
  account_id: uuid!
  created_at: timestamp!
  id: Int!
  original: String!
  simplified: String!
  updated_at: timestamp!
  verified: Boolean!
}

"""
aggregated selection of "user_emails"
"""
type emails_aggregate {
  aggregate: emails_aggregate_fields
  nodes: [emails!]!
}

"""
aggregate fields of "user_emails"
"""
type emails_aggregate_fields {
  avg: emails_avg_fields
  count(columns: [emails_select_column!], distinct: Boolean): Int!
  max: emails_max_fields
  min: emails_min_fields
  stddev: emails_stddev_fields
  stddev_pop: emails_stddev_pop_fields
  stddev_samp: emails_stddev_samp_fields
  sum: emails_sum_fields
  var_pop: emails_var_pop_fields
  var_samp: emails_var_samp_fields
  variance: emails_variance_fields
}

"""
order by aggregate values of table "user_emails"
"""
input emails_aggregate_order_by {
  avg: emails_avg_order_by
  count: order_by
  max: emails_max_order_by
  min: emails_min_order_by
  stddev: emails_stddev_order_by
  stddev_pop: emails_stddev_pop_order_by
  stddev_samp: emails_stddev_samp_order_by
  sum: emails_sum_order_by
  var_pop: emails_var_pop_order_by
  var_samp: emails_var_samp_order_by
  variance: emails_variance_order_by
}

"""
input type for inserting array relation for remote table "user_emails"
"""
input emails_arr_rel_insert_input {
  data: [emails_insert_input!]!

  """on conflict condition"""
  on_conflict: emails_on_conflict
}

"""aggregate avg on columns"""
type emails_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "user_emails"
"""
input emails_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "user_emails". All fields are combined with a logical 'AND'.
"""
input emails_bool_exp {
  _and: [emails_bool_exp!]
  _not: emails_bool_exp
  _or: [emails_bool_exp!]
  account: users_bool_exp
  account_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  id: Int_comparison_exp
  original: String_comparison_exp
  simplified: String_comparison_exp
  updated_at: timestamp_comparison_exp
  verified: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "user_emails"
"""
enum emails_constraint {
  """unique or primary key constraint"""
  user_email_original_key

  """unique or primary key constraint"""
  user_email_pk
}

"""
input type for incrementing numeric columns in table "user_emails"
"""
input emails_inc_input {
  id: Int
}

"""
input type for inserting data into table "user_emails"
"""
input emails_insert_input {
  account: users_obj_rel_insert_input
  account_id: uuid
  created_at: timestamp
  id: Int
  original: String
  simplified: String
  updated_at: timestamp
  verified: Boolean
}

"""aggregate max on columns"""
type emails_max_fields {
  account_id: uuid
  created_at: timestamp
  id: Int
  original: String
  simplified: String
  updated_at: timestamp
}

"""
order by max() on columns of table "user_emails"
"""
input emails_max_order_by {
  account_id: order_by
  created_at: order_by
  id: order_by
  original: order_by
  simplified: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type emails_min_fields {
  account_id: uuid
  created_at: timestamp
  id: Int
  original: String
  simplified: String
  updated_at: timestamp
}

"""
order by min() on columns of table "user_emails"
"""
input emails_min_order_by {
  account_id: order_by
  created_at: order_by
  id: order_by
  original: order_by
  simplified: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "user_emails"
"""
type emails_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [emails!]!
}

"""
on conflict condition type for table "user_emails"
"""
input emails_on_conflict {
  constraint: emails_constraint!
  update_columns: [emails_update_column!]! = []
  where: emails_bool_exp
}

"""Ordering options when selecting data from "user_emails"."""
input emails_order_by {
  account: users_order_by
  account_id: order_by
  created_at: order_by
  id: order_by
  original: order_by
  simplified: order_by
  updated_at: order_by
  verified: order_by
}

"""primary key columns input for table: emails"""
input emails_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_emails"
"""
enum emails_select_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  original

  """column name"""
  simplified

  """column name"""
  updated_at

  """column name"""
  verified
}

"""
input type for updating data in table "user_emails"
"""
input emails_set_input {
  account_id: uuid
  created_at: timestamp
  id: Int
  original: String
  simplified: String
  updated_at: timestamp
  verified: Boolean
}

"""aggregate stddev on columns"""
type emails_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "user_emails"
"""
input emails_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type emails_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "user_emails"
"""
input emails_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type emails_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "user_emails"
"""
input emails_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type emails_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "user_emails"
"""
input emails_sum_order_by {
  id: order_by
}

"""
update columns of table "user_emails"
"""
enum emails_update_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  original

  """column name"""
  simplified

  """column name"""
  updated_at

  """column name"""
  verified
}

"""aggregate var_pop on columns"""
type emails_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "user_emails"
"""
input emails_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type emails_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "user_emails"
"""
input emails_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type emails_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "user_emails"
"""
input emails_variance_order_by {
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "user_blocks"
  """
  delete_blocklists(
    """filter the rows which have to be deleted"""
    where: blocklists_bool_exp!
  ): blocklists_mutation_response

  """
  delete single row from the table: "user_blocks"
  """
  delete_blocklists_by_pk(id: Int!): blocklists

  """
  delete data from the table: "channels"
  """
  delete_channels(
    """filter the rows which have to be deleted"""
    where: channels_bool_exp!
  ): channels_mutation_response

  """
  delete single row from the table: "channels"
  """
  delete_channels_by_pk(id: uuid!): channels

  """
  delete data from the table: "user_emails"
  """
  delete_emails(
    """filter the rows which have to be deleted"""
    where: emails_bool_exp!
  ): emails_mutation_response

  """
  delete single row from the table: "user_emails"
  """
  delete_emails_by_pk(id: Int!): emails

  """
  delete data from the table: "posts"
  """
  delete_posts(
    """filter the rows which have to be deleted"""
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  delete single row from the table: "posts"
  """
  delete_posts_by_pk(id: uuid!): posts

  """
  delete data from the table: "user_roles"
  """
  delete_roles(
    """filter the rows which have to be deleted"""
    where: roles_bool_exp!
  ): roles_mutation_response

  """
  delete single row from the table: "user_roles"
  """
  delete_roles_by_pk(id: uuid!): roles

  """
  delete data from the table: "channel_subscriptions"
  """
  delete_subscriptions(
    """filter the rows which have to be deleted"""
    where: subscriptions_bool_exp!
  ): subscriptions_mutation_response

  """
  delete single row from the table: "channel_subscriptions"
  """
  delete_subscriptions_by_pk(id: Int!): subscriptions

  """
  delete data from the table: "channel_tiers"
  """
  delete_tiers(
    """filter the rows which have to be deleted"""
    where: tiers_bool_exp!
  ): tiers_mutation_response

  """
  delete single row from the table: "channel_tiers"
  """
  delete_tiers_by_pk(id: Int!): tiers

  """
  delete data from the table: "user_unlocked_posts"
  """
  delete_user_unlocked_posts(
    """filter the rows which have to be deleted"""
    where: user_unlocked_posts_bool_exp!
  ): user_unlocked_posts_mutation_response

  """
  delete single row from the table: "user_unlocked_posts"
  """
  delete_user_unlocked_posts_by_pk(id: Int!): user_unlocked_posts

  """
  delete data from the table: "user_accounts"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "user_accounts"
  """
  delete_users_by_pk(id: uuid!): users

  """
  insert data into the table: "user_blocks"
  """
  insert_blocklists(
    """the rows to be inserted"""
    objects: [blocklists_insert_input!]!

    """on conflict condition"""
    on_conflict: blocklists_on_conflict
  ): blocklists_mutation_response

  """
  insert a single row into the table: "user_blocks"
  """
  insert_blocklists_one(
    """the row to be inserted"""
    object: blocklists_insert_input!

    """on conflict condition"""
    on_conflict: blocklists_on_conflict
  ): blocklists

  """
  insert data into the table: "channels"
  """
  insert_channels(
    """the rows to be inserted"""
    objects: [channels_insert_input!]!

    """on conflict condition"""
    on_conflict: channels_on_conflict
  ): channels_mutation_response

  """
  insert a single row into the table: "channels"
  """
  insert_channels_one(
    """the row to be inserted"""
    object: channels_insert_input!

    """on conflict condition"""
    on_conflict: channels_on_conflict
  ): channels

  """
  insert data into the table: "user_emails"
  """
  insert_emails(
    """the rows to be inserted"""
    objects: [emails_insert_input!]!

    """on conflict condition"""
    on_conflict: emails_on_conflict
  ): emails_mutation_response

  """
  insert a single row into the table: "user_emails"
  """
  insert_emails_one(
    """the row to be inserted"""
    object: emails_insert_input!

    """on conflict condition"""
    on_conflict: emails_on_conflict
  ): emails

  """
  insert data into the table: "posts"
  """
  insert_posts(
    """the rows to be inserted"""
    objects: [posts_insert_input!]!

    """on conflict condition"""
    on_conflict: posts_on_conflict
  ): posts_mutation_response

  """
  insert a single row into the table: "posts"
  """
  insert_posts_one(
    """the row to be inserted"""
    object: posts_insert_input!

    """on conflict condition"""
    on_conflict: posts_on_conflict
  ): posts

  """
  insert data into the table: "user_roles"
  """
  insert_roles(
    """the rows to be inserted"""
    objects: [roles_insert_input!]!

    """on conflict condition"""
    on_conflict: roles_on_conflict
  ): roles_mutation_response

  """
  insert a single row into the table: "user_roles"
  """
  insert_roles_one(
    """the row to be inserted"""
    object: roles_insert_input!

    """on conflict condition"""
    on_conflict: roles_on_conflict
  ): roles

  """
  insert data into the table: "channel_subscriptions"
  """
  insert_subscriptions(
    """the rows to be inserted"""
    objects: [subscriptions_insert_input!]!

    """on conflict condition"""
    on_conflict: subscriptions_on_conflict
  ): subscriptions_mutation_response

  """
  insert a single row into the table: "channel_subscriptions"
  """
  insert_subscriptions_one(
    """the row to be inserted"""
    object: subscriptions_insert_input!

    """on conflict condition"""
    on_conflict: subscriptions_on_conflict
  ): subscriptions

  """
  insert data into the table: "channel_tiers"
  """
  insert_tiers(
    """the rows to be inserted"""
    objects: [tiers_insert_input!]!

    """on conflict condition"""
    on_conflict: tiers_on_conflict
  ): tiers_mutation_response

  """
  insert a single row into the table: "channel_tiers"
  """
  insert_tiers_one(
    """the row to be inserted"""
    object: tiers_insert_input!

    """on conflict condition"""
    on_conflict: tiers_on_conflict
  ): tiers

  """
  insert data into the table: "user_unlocked_posts"
  """
  insert_user_unlocked_posts(
    """the rows to be inserted"""
    objects: [user_unlocked_posts_insert_input!]!

    """on conflict condition"""
    on_conflict: user_unlocked_posts_on_conflict
  ): user_unlocked_posts_mutation_response

  """
  insert a single row into the table: "user_unlocked_posts"
  """
  insert_user_unlocked_posts_one(
    """the row to be inserted"""
    object: user_unlocked_posts_insert_input!

    """on conflict condition"""
    on_conflict: user_unlocked_posts_on_conflict
  ): user_unlocked_posts

  """
  insert data into the table: "user_accounts"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "user_accounts"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "user_blocks"
  """
  update_blocklists(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blocklists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blocklists_set_input

    """filter the rows which have to be updated"""
    where: blocklists_bool_exp!
  ): blocklists_mutation_response

  """
  update single row of the table: "user_blocks"
  """
  update_blocklists_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blocklists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blocklists_set_input
    pk_columns: blocklists_pk_columns_input!
  ): blocklists

  """
  update data of the table: "channels"
  """
  update_channels(
    """sets the columns of the filtered rows to the given values"""
    _set: channels_set_input

    """filter the rows which have to be updated"""
    where: channels_bool_exp!
  ): channels_mutation_response

  """
  update single row of the table: "channels"
  """
  update_channels_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: channels_set_input
    pk_columns: channels_pk_columns_input!
  ): channels

  """
  update data of the table: "user_emails"
  """
  update_emails(
    """increments the numeric columns with given value of the filtered values"""
    _inc: emails_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: emails_set_input

    """filter the rows which have to be updated"""
    where: emails_bool_exp!
  ): emails_mutation_response

  """
  update single row of the table: "user_emails"
  """
  update_emails_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: emails_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: emails_set_input
    pk_columns: emails_pk_columns_input!
  ): emails

  """
  update data of the table: "posts"
  """
  update_posts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input

    """filter the rows which have to be updated"""
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  update single row of the table: "posts"
  """
  update_posts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input
    pk_columns: posts_pk_columns_input!
  ): posts

  """
  update data of the table: "user_roles"
  """
  update_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: roles_set_input

    """filter the rows which have to be updated"""
    where: roles_bool_exp!
  ): roles_mutation_response

  """
  update single row of the table: "user_roles"
  """
  update_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: roles_set_input
    pk_columns: roles_pk_columns_input!
  ): roles

  """
  update data of the table: "channel_subscriptions"
  """
  update_subscriptions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: subscriptions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: subscriptions_set_input

    """filter the rows which have to be updated"""
    where: subscriptions_bool_exp!
  ): subscriptions_mutation_response

  """
  update single row of the table: "channel_subscriptions"
  """
  update_subscriptions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: subscriptions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: subscriptions_set_input
    pk_columns: subscriptions_pk_columns_input!
  ): subscriptions

  """
  update data of the table: "channel_tiers"
  """
  update_tiers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tiers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tiers_set_input

    """filter the rows which have to be updated"""
    where: tiers_bool_exp!
  ): tiers_mutation_response

  """
  update single row of the table: "channel_tiers"
  """
  update_tiers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tiers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tiers_set_input
    pk_columns: tiers_pk_columns_input!
  ): tiers

  """
  update data of the table: "user_unlocked_posts"
  """
  update_user_unlocked_posts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_unlocked_posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_unlocked_posts_set_input

    """filter the rows which have to be updated"""
    where: user_unlocked_posts_bool_exp!
  ): user_unlocked_posts_mutation_response

  """
  update single row of the table: "user_unlocked_posts"
  """
  update_user_unlocked_posts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_unlocked_posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_unlocked_posts_set_input
    pk_columns: user_unlocked_posts_pk_columns_input!
  ): user_unlocked_posts

  """
  update data of the table: "user_accounts"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "user_accounts"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "posts"
"""
type posts {
  """An object relationship"""
  author: users!
  author_id: uuid!

  """
  A computed field, executes function "post_authorized_claim"
  """
  authorized_claim: String

  """An array relationship"""
  authorized_users(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): [user_unlocked_posts!]!

  """An aggregate relationship"""
  authorized_users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): user_unlocked_posts_aggregate!
  body: String!

  """An object relationship"""
  channel: channels!
  channel_id: uuid!
  created_at: timestamp!
  id: uuid!
  ppv_price: Int
  public_id: String!
  published_at: timestamp

  """An object relationship"""
  tier: tiers!
  tier_id: Int!
  updated_at: timestamp!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
  aggregate: posts_aggregate_fields
  nodes: [posts!]!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
  avg: posts_avg_fields
  count(columns: [posts_select_column!], distinct: Boolean): Int!
  max: posts_max_fields
  min: posts_min_fields
  stddev: posts_stddev_fields
  stddev_pop: posts_stddev_pop_fields
  stddev_samp: posts_stddev_samp_fields
  sum: posts_sum_fields
  var_pop: posts_var_pop_fields
  var_samp: posts_var_samp_fields
  variance: posts_variance_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
  avg: posts_avg_order_by
  count: order_by
  max: posts_max_order_by
  min: posts_min_order_by
  stddev: posts_stddev_order_by
  stddev_pop: posts_stddev_pop_order_by
  stddev_samp: posts_stddev_samp_order_by
  sum: posts_sum_order_by
  var_pop: posts_var_pop_order_by
  var_samp: posts_var_samp_order_by
  variance: posts_variance_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
  data: [posts_insert_input!]!

  """on conflict condition"""
  on_conflict: posts_on_conflict
}

"""aggregate avg on columns"""
type posts_avg_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by avg() on columns of table "posts"
"""
input posts_avg_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
  _and: [posts_bool_exp!]
  _not: posts_bool_exp
  _or: [posts_bool_exp!]
  author: users_bool_exp
  author_id: uuid_comparison_exp
  authorized_claim: String_comparison_exp
  authorized_users: user_unlocked_posts_bool_exp
  body: String_comparison_exp
  channel: channels_bool_exp
  channel_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  ppv_price: Int_comparison_exp
  public_id: String_comparison_exp
  published_at: timestamp_comparison_exp
  tier: tiers_bool_exp
  tier_id: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
  """unique or primary key constraint"""
  posts_channel_id_public_id_key

  """unique or primary key constraint"""
  posts_pk
}

"""
input type for incrementing numeric columns in table "posts"
"""
input posts_inc_input {
  ppv_price: Int
  tier_id: Int
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
  author: users_obj_rel_insert_input
  author_id: uuid
  authorized_users: user_unlocked_posts_arr_rel_insert_input
  body: String
  channel: channels_obj_rel_insert_input
  channel_id: uuid
  created_at: timestamp
  id: uuid
  ppv_price: Int
  public_id: String
  published_at: timestamp
  tier: tiers_obj_rel_insert_input
  tier_id: Int
  updated_at: timestamp
}

"""aggregate max on columns"""
type posts_max_fields {
  author_id: uuid
  body: String
  channel_id: uuid
  created_at: timestamp
  id: uuid
  ppv_price: Int
  public_id: String
  published_at: timestamp
  tier_id: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
  author_id: order_by
  body: order_by
  channel_id: order_by
  created_at: order_by
  id: order_by
  ppv_price: order_by
  public_id: order_by
  published_at: order_by
  tier_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type posts_min_fields {
  author_id: uuid
  body: String
  channel_id: uuid
  created_at: timestamp
  id: uuid
  ppv_price: Int
  public_id: String
  published_at: timestamp
  tier_id: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
  author_id: order_by
  body: order_by
  channel_id: order_by
  created_at: order_by
  id: order_by
  ppv_price: order_by
  public_id: order_by
  published_at: order_by
  tier_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [posts!]!
}

"""
input type for inserting object relation for remote table "posts"
"""
input posts_obj_rel_insert_input {
  data: posts_insert_input!

  """on conflict condition"""
  on_conflict: posts_on_conflict
}

"""
on conflict condition type for table "posts"
"""
input posts_on_conflict {
  constraint: posts_constraint!
  update_columns: [posts_update_column!]! = []
  where: posts_bool_exp
}

"""Ordering options when selecting data from "posts"."""
input posts_order_by {
  author: users_order_by
  author_id: order_by
  authorized_claim: order_by
  authorized_users_aggregate: user_unlocked_posts_aggregate_order_by
  body: order_by
  channel: channels_order_by
  channel_id: order_by
  created_at: order_by
  id: order_by
  ppv_price: order_by
  public_id: order_by
  published_at: order_by
  tier: tiers_order_by
  tier_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: posts"""
input posts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
  """column name"""
  author_id

  """column name"""
  body

  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  ppv_price

  """column name"""
  public_id

  """column name"""
  published_at

  """column name"""
  tier_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
  author_id: uuid
  body: String
  channel_id: uuid
  created_at: timestamp
  id: uuid
  ppv_price: Int
  public_id: String
  published_at: timestamp
  tier_id: Int
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type posts_stddev_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by stddev() on columns of table "posts"
"""
input posts_stddev_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""aggregate stddev_pop on columns"""
type posts_stddev_pop_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by stddev_pop() on columns of table "posts"
"""
input posts_stddev_pop_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""aggregate stddev_samp on columns"""
type posts_stddev_samp_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by stddev_samp() on columns of table "posts"
"""
input posts_stddev_samp_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""aggregate sum on columns"""
type posts_sum_fields {
  ppv_price: Int
  tier_id: Int
}

"""
order by sum() on columns of table "posts"
"""
input posts_sum_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""
update columns of table "posts"
"""
enum posts_update_column {
  """column name"""
  author_id

  """column name"""
  body

  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  ppv_price

  """column name"""
  public_id

  """column name"""
  published_at

  """column name"""
  tier_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type posts_var_pop_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by var_pop() on columns of table "posts"
"""
input posts_var_pop_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""aggregate var_samp on columns"""
type posts_var_samp_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by var_samp() on columns of table "posts"
"""
input posts_var_samp_order_by {
  ppv_price: order_by
  tier_id: order_by
}

"""aggregate variance on columns"""
type posts_variance_fields {
  ppv_price: Float
  tier_id: Float
}

"""
order by variance() on columns of table "posts"
"""
input posts_variance_order_by {
  ppv_price: order_by
  tier_id: order_by
}

type query_root {
  """
  fetch data from the table: "user_blocks"
  """
  blocklists(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): [blocklists!]!

  """
  fetch aggregated fields from the table: "user_blocks"
  """
  blocklists_aggregate(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): blocklists_aggregate!

  """fetch data from the table: "user_blocks" using primary key columns"""
  blocklists_by_pk(id: Int!): blocklists

  """An array relationship"""
  channels(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): [channels!]!

  """An aggregate relationship"""
  channels_aggregate(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): channels_aggregate!

  """fetch data from the table: "channels" using primary key columns"""
  channels_by_pk(id: uuid!): channels

  """An array relationship"""
  emails(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): [emails!]!

  """An aggregate relationship"""
  emails_aggregate(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): emails_aggregate!

  """fetch data from the table: "user_emails" using primary key columns"""
  emails_by_pk(id: Int!): emails

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!

  """fetch data from the table: "posts" using primary key columns"""
  posts_by_pk(id: uuid!): posts

  """
  fetch data from the table: "user_roles"
  """
  roles(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): [roles!]!

  """
  fetch aggregated fields from the table: "user_roles"
  """
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): roles_aggregate!

  """fetch data from the table: "user_roles" using primary key columns"""
  roles_by_pk(id: uuid!): roles

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """
  fetch data from the table: "channel_subscriptions" using primary key columns
  """
  subscriptions_by_pk(id: Int!): subscriptions

  """
  fetch data from the table: "channel_tiers"
  """
  tiers(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): [tiers!]!

  """An aggregate relationship"""
  tiers_aggregate(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): tiers_aggregate!

  """fetch data from the table: "channel_tiers" using primary key columns"""
  tiers_by_pk(id: Int!): tiers

  """
  fetch data from the table: "user_unlocked_posts"
  """
  user_unlocked_posts(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): [user_unlocked_posts!]!

  """
  fetch aggregated fields from the table: "user_unlocked_posts"
  """
  user_unlocked_posts_aggregate(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): user_unlocked_posts_aggregate!

  """
  fetch data from the table: "user_unlocked_posts" using primary key columns
  """
  user_unlocked_posts_by_pk(id: Int!): user_unlocked_posts

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "user_accounts" using primary key columns"""
  users_by_pk(id: uuid!): users
}

"""
columns and relationships of "user_roles"
"""
type roles {
  created_at: timestamp!
  description: String!
  display_name: String!
  id: uuid!
  name: String!
  updated_at: timestamp!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "user_roles"
"""
type roles_aggregate {
  aggregate: roles_aggregate_fields
  nodes: [roles!]!
}

"""
aggregate fields of "user_roles"
"""
type roles_aggregate_fields {
  count(columns: [roles_select_column!], distinct: Boolean): Int!
  max: roles_max_fields
  min: roles_min_fields
}

"""
Boolean expression to filter rows from the table "user_roles". All fields are combined with a logical 'AND'.
"""
input roles_bool_exp {
  _and: [roles_bool_exp!]
  _not: roles_bool_exp
  _or: [roles_bool_exp!]
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  display_name: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamp_comparison_exp
  users: users_bool_exp
}

"""
unique or primary key constraints on table "user_roles"
"""
enum roles_constraint {
  """unique or primary key constraint"""
  user_role_name_key

  """unique or primary key constraint"""
  user_role_pk
}

"""
input type for inserting data into table "user_roles"
"""
input roles_insert_input {
  created_at: timestamp
  description: String
  display_name: String
  id: uuid
  name: String
  updated_at: timestamp
  users: users_arr_rel_insert_input
}

"""aggregate max on columns"""
type roles_max_fields {
  created_at: timestamp
  description: String
  display_name: String
  id: uuid
  name: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type roles_min_fields {
  created_at: timestamp
  description: String
  display_name: String
  id: uuid
  name: String
  updated_at: timestamp
}

"""
response of any mutation on the table "user_roles"
"""
type roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [roles!]!
}

"""
input type for inserting object relation for remote table "user_roles"
"""
input roles_obj_rel_insert_input {
  data: roles_insert_input!

  """on conflict condition"""
  on_conflict: roles_on_conflict
}

"""
on conflict condition type for table "user_roles"
"""
input roles_on_conflict {
  constraint: roles_constraint!
  update_columns: [roles_update_column!]! = []
  where: roles_bool_exp
}

"""Ordering options when selecting data from "user_roles"."""
input roles_order_by {
  created_at: order_by
  description: order_by
  display_name: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  users_aggregate: users_aggregate_order_by
}

"""primary key columns input for table: roles"""
input roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_roles"
"""
enum roles_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "user_roles"
"""
input roles_set_input {
  created_at: timestamp
  description: String
  display_name: String
  id: uuid
  name: String
  updated_at: timestamp
}

"""
update columns of table "user_roles"
"""
enum roles_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

type subscription_root {
  """
  fetch data from the table: "user_blocks"
  """
  blocklists(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): [blocklists!]!

  """
  fetch aggregated fields from the table: "user_blocks"
  """
  blocklists_aggregate(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): blocklists_aggregate!

  """fetch data from the table: "user_blocks" using primary key columns"""
  blocklists_by_pk(id: Int!): blocklists

  """An array relationship"""
  channels(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): [channels!]!

  """An aggregate relationship"""
  channels_aggregate(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): channels_aggregate!

  """fetch data from the table: "channels" using primary key columns"""
  channels_by_pk(id: uuid!): channels

  """An array relationship"""
  emails(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): [emails!]!

  """An aggregate relationship"""
  emails_aggregate(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): emails_aggregate!

  """fetch data from the table: "user_emails" using primary key columns"""
  emails_by_pk(id: Int!): emails

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!

  """fetch data from the table: "posts" using primary key columns"""
  posts_by_pk(id: uuid!): posts

  """
  fetch data from the table: "user_roles"
  """
  roles(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): [roles!]!

  """
  fetch aggregated fields from the table: "user_roles"
  """
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): roles_aggregate!

  """fetch data from the table: "user_roles" using primary key columns"""
  roles_by_pk(id: uuid!): roles

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """
  fetch data from the table: "channel_subscriptions" using primary key columns
  """
  subscriptions_by_pk(id: Int!): subscriptions

  """
  fetch data from the table: "channel_tiers"
  """
  tiers(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): [tiers!]!

  """An aggregate relationship"""
  tiers_aggregate(
    """distinct select on columns"""
    distinct_on: [tiers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tiers_order_by!]

    """filter the rows returned"""
    where: tiers_bool_exp
  ): tiers_aggregate!

  """fetch data from the table: "channel_tiers" using primary key columns"""
  tiers_by_pk(id: Int!): tiers

  """
  fetch data from the table: "user_unlocked_posts"
  """
  user_unlocked_posts(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): [user_unlocked_posts!]!

  """
  fetch aggregated fields from the table: "user_unlocked_posts"
  """
  user_unlocked_posts_aggregate(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): user_unlocked_posts_aggregate!

  """
  fetch data from the table: "user_unlocked_posts" using primary key columns
  """
  user_unlocked_posts_by_pk(id: Int!): user_unlocked_posts

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "user_accounts" using primary key columns"""
  users_by_pk(id: uuid!): users
}

"""
columns and relationships of "channel_subscriptions"
"""
type subscriptions {
  """An object relationship"""
  channel: channels!
  channel_id: uuid!
  created_at: timestamp!
  id: Int!

  """An object relationship"""
  tier: tiers!
  tier_id: Int!
  updated_at: timestamp!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "channel_subscriptions"
"""
type subscriptions_aggregate {
  aggregate: subscriptions_aggregate_fields
  nodes: [subscriptions!]!
}

"""
aggregate fields of "channel_subscriptions"
"""
type subscriptions_aggregate_fields {
  avg: subscriptions_avg_fields
  count(columns: [subscriptions_select_column!], distinct: Boolean): Int!
  max: subscriptions_max_fields
  min: subscriptions_min_fields
  stddev: subscriptions_stddev_fields
  stddev_pop: subscriptions_stddev_pop_fields
  stddev_samp: subscriptions_stddev_samp_fields
  sum: subscriptions_sum_fields
  var_pop: subscriptions_var_pop_fields
  var_samp: subscriptions_var_samp_fields
  variance: subscriptions_variance_fields
}

"""
order by aggregate values of table "channel_subscriptions"
"""
input subscriptions_aggregate_order_by {
  avg: subscriptions_avg_order_by
  count: order_by
  max: subscriptions_max_order_by
  min: subscriptions_min_order_by
  stddev: subscriptions_stddev_order_by
  stddev_pop: subscriptions_stddev_pop_order_by
  stddev_samp: subscriptions_stddev_samp_order_by
  sum: subscriptions_sum_order_by
  var_pop: subscriptions_var_pop_order_by
  var_samp: subscriptions_var_samp_order_by
  variance: subscriptions_variance_order_by
}

"""
input type for inserting array relation for remote table "channel_subscriptions"
"""
input subscriptions_arr_rel_insert_input {
  data: [subscriptions_insert_input!]!

  """on conflict condition"""
  on_conflict: subscriptions_on_conflict
}

"""aggregate avg on columns"""
type subscriptions_avg_fields {
  id: Float
  tier_id: Float
}

"""
order by avg() on columns of table "channel_subscriptions"
"""
input subscriptions_avg_order_by {
  id: order_by
  tier_id: order_by
}

"""
Boolean expression to filter rows from the table "channel_subscriptions". All fields are combined with a logical 'AND'.
"""
input subscriptions_bool_exp {
  _and: [subscriptions_bool_exp!]
  _not: subscriptions_bool_exp
  _or: [subscriptions_bool_exp!]
  channel: channels_bool_exp
  channel_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  id: Int_comparison_exp
  tier: tiers_bool_exp
  tier_id: Int_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "channel_subscriptions"
"""
enum subscriptions_constraint {
  """unique or primary key constraint"""
  channel_subscriptions_channel_id_user_id_key

  """unique or primary key constraint"""
  channel_subscriptions_pk
}

"""
input type for incrementing numeric columns in table "channel_subscriptions"
"""
input subscriptions_inc_input {
  id: Int
  tier_id: Int
}

"""
input type for inserting data into table "channel_subscriptions"
"""
input subscriptions_insert_input {
  channel: channels_obj_rel_insert_input
  channel_id: uuid
  created_at: timestamp
  id: Int
  tier: tiers_obj_rel_insert_input
  tier_id: Int
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type subscriptions_max_fields {
  channel_id: uuid
  created_at: timestamp
  id: Int
  tier_id: Int
  updated_at: timestamp
  user_id: uuid
}

"""
order by max() on columns of table "channel_subscriptions"
"""
input subscriptions_max_order_by {
  channel_id: order_by
  created_at: order_by
  id: order_by
  tier_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type subscriptions_min_fields {
  channel_id: uuid
  created_at: timestamp
  id: Int
  tier_id: Int
  updated_at: timestamp
  user_id: uuid
}

"""
order by min() on columns of table "channel_subscriptions"
"""
input subscriptions_min_order_by {
  channel_id: order_by
  created_at: order_by
  id: order_by
  tier_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "channel_subscriptions"
"""
type subscriptions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [subscriptions!]!
}

"""
on conflict condition type for table "channel_subscriptions"
"""
input subscriptions_on_conflict {
  constraint: subscriptions_constraint!
  update_columns: [subscriptions_update_column!]! = []
  where: subscriptions_bool_exp
}

"""Ordering options when selecting data from "channel_subscriptions"."""
input subscriptions_order_by {
  channel: channels_order_by
  channel_id: order_by
  created_at: order_by
  id: order_by
  tier: tiers_order_by
  tier_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: subscriptions"""
input subscriptions_pk_columns_input {
  id: Int!
}

"""
select columns of table "channel_subscriptions"
"""
enum subscriptions_select_column {
  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  tier_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "channel_subscriptions"
"""
input subscriptions_set_input {
  channel_id: uuid
  created_at: timestamp
  id: Int
  tier_id: Int
  updated_at: timestamp
  user_id: uuid
}

"""aggregate stddev on columns"""
type subscriptions_stddev_fields {
  id: Float
  tier_id: Float
}

"""
order by stddev() on columns of table "channel_subscriptions"
"""
input subscriptions_stddev_order_by {
  id: order_by
  tier_id: order_by
}

"""aggregate stddev_pop on columns"""
type subscriptions_stddev_pop_fields {
  id: Float
  tier_id: Float
}

"""
order by stddev_pop() on columns of table "channel_subscriptions"
"""
input subscriptions_stddev_pop_order_by {
  id: order_by
  tier_id: order_by
}

"""aggregate stddev_samp on columns"""
type subscriptions_stddev_samp_fields {
  id: Float
  tier_id: Float
}

"""
order by stddev_samp() on columns of table "channel_subscriptions"
"""
input subscriptions_stddev_samp_order_by {
  id: order_by
  tier_id: order_by
}

"""aggregate sum on columns"""
type subscriptions_sum_fields {
  id: Int
  tier_id: Int
}

"""
order by sum() on columns of table "channel_subscriptions"
"""
input subscriptions_sum_order_by {
  id: order_by
  tier_id: order_by
}

"""
update columns of table "channel_subscriptions"
"""
enum subscriptions_update_column {
  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  tier_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type subscriptions_var_pop_fields {
  id: Float
  tier_id: Float
}

"""
order by var_pop() on columns of table "channel_subscriptions"
"""
input subscriptions_var_pop_order_by {
  id: order_by
  tier_id: order_by
}

"""aggregate var_samp on columns"""
type subscriptions_var_samp_fields {
  id: Float
  tier_id: Float
}

"""
order by var_samp() on columns of table "channel_subscriptions"
"""
input subscriptions_var_samp_order_by {
  id: order_by
  tier_id: order_by
}

"""aggregate variance on columns"""
type subscriptions_variance_fields {
  id: Float
  tier_id: Float
}

"""
order by variance() on columns of table "channel_subscriptions"
"""
input subscriptions_variance_order_by {
  id: order_by
  tier_id: order_by
}

"""
columns and relationships of "channel_tiers"
"""
type tiers {
  """An object relationship"""
  channel: channels!
  channel_id: uuid!
  created_at: timestamp!
  description: String!
  id: Int!
  level: Int!
  name: String!

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!
  slug: String!

  """An array relationship"""
  subs(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subs_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!
  updated_at: timestamp!
}

"""
aggregated selection of "channel_tiers"
"""
type tiers_aggregate {
  aggregate: tiers_aggregate_fields
  nodes: [tiers!]!
}

"""
aggregate fields of "channel_tiers"
"""
type tiers_aggregate_fields {
  avg: tiers_avg_fields
  count(columns: [tiers_select_column!], distinct: Boolean): Int!
  max: tiers_max_fields
  min: tiers_min_fields
  stddev: tiers_stddev_fields
  stddev_pop: tiers_stddev_pop_fields
  stddev_samp: tiers_stddev_samp_fields
  sum: tiers_sum_fields
  var_pop: tiers_var_pop_fields
  var_samp: tiers_var_samp_fields
  variance: tiers_variance_fields
}

"""
order by aggregate values of table "channel_tiers"
"""
input tiers_aggregate_order_by {
  avg: tiers_avg_order_by
  count: order_by
  max: tiers_max_order_by
  min: tiers_min_order_by
  stddev: tiers_stddev_order_by
  stddev_pop: tiers_stddev_pop_order_by
  stddev_samp: tiers_stddev_samp_order_by
  sum: tiers_sum_order_by
  var_pop: tiers_var_pop_order_by
  var_samp: tiers_var_samp_order_by
  variance: tiers_variance_order_by
}

"""
input type for inserting array relation for remote table "channel_tiers"
"""
input tiers_arr_rel_insert_input {
  data: [tiers_insert_input!]!

  """on conflict condition"""
  on_conflict: tiers_on_conflict
}

"""aggregate avg on columns"""
type tiers_avg_fields {
  id: Float
  level: Float
}

"""
order by avg() on columns of table "channel_tiers"
"""
input tiers_avg_order_by {
  id: order_by
  level: order_by
}

"""
Boolean expression to filter rows from the table "channel_tiers". All fields are combined with a logical 'AND'.
"""
input tiers_bool_exp {
  _and: [tiers_bool_exp!]
  _not: tiers_bool_exp
  _or: [tiers_bool_exp!]
  channel: channels_bool_exp
  channel_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  posts: posts_bool_exp
  slug: String_comparison_exp
  subs: subscriptions_bool_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "channel_tiers"
"""
enum tiers_constraint {
  """unique or primary key constraint"""
  channel_tiers_channel_id_level_key

  """unique or primary key constraint"""
  channel_tiers_channel_id_slug_key

  """unique or primary key constraint"""
  channel_tiers_pk
}

"""
input type for incrementing numeric columns in table "channel_tiers"
"""
input tiers_inc_input {
  id: Int
  level: Int
}

"""
input type for inserting data into table "channel_tiers"
"""
input tiers_insert_input {
  channel: channels_obj_rel_insert_input
  channel_id: uuid
  created_at: timestamp
  description: String
  id: Int
  level: Int
  name: String
  posts: posts_arr_rel_insert_input
  slug: String
  subs: subscriptions_arr_rel_insert_input
  updated_at: timestamp
}

"""aggregate max on columns"""
type tiers_max_fields {
  channel_id: uuid
  created_at: timestamp
  description: String
  id: Int
  level: Int
  name: String
  slug: String
  updated_at: timestamp
}

"""
order by max() on columns of table "channel_tiers"
"""
input tiers_max_order_by {
  channel_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  level: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type tiers_min_fields {
  channel_id: uuid
  created_at: timestamp
  description: String
  id: Int
  level: Int
  name: String
  slug: String
  updated_at: timestamp
}

"""
order by min() on columns of table "channel_tiers"
"""
input tiers_min_order_by {
  channel_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  level: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "channel_tiers"
"""
type tiers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tiers!]!
}

"""
input type for inserting object relation for remote table "channel_tiers"
"""
input tiers_obj_rel_insert_input {
  data: tiers_insert_input!

  """on conflict condition"""
  on_conflict: tiers_on_conflict
}

"""
on conflict condition type for table "channel_tiers"
"""
input tiers_on_conflict {
  constraint: tiers_constraint!
  update_columns: [tiers_update_column!]! = []
  where: tiers_bool_exp
}

"""Ordering options when selecting data from "channel_tiers"."""
input tiers_order_by {
  channel: channels_order_by
  channel_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  level: order_by
  name: order_by
  posts_aggregate: posts_aggregate_order_by
  slug: order_by
  subs_aggregate: subscriptions_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: tiers"""
input tiers_pk_columns_input {
  id: Int!
}

"""
select columns of table "channel_tiers"
"""
enum tiers_select_column {
  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  level

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updated_at
}

"""
input type for updating data in table "channel_tiers"
"""
input tiers_set_input {
  channel_id: uuid
  created_at: timestamp
  description: String
  id: Int
  level: Int
  name: String
  slug: String
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type tiers_stddev_fields {
  id: Float
  level: Float
}

"""
order by stddev() on columns of table "channel_tiers"
"""
input tiers_stddev_order_by {
  id: order_by
  level: order_by
}

"""aggregate stddev_pop on columns"""
type tiers_stddev_pop_fields {
  id: Float
  level: Float
}

"""
order by stddev_pop() on columns of table "channel_tiers"
"""
input tiers_stddev_pop_order_by {
  id: order_by
  level: order_by
}

"""aggregate stddev_samp on columns"""
type tiers_stddev_samp_fields {
  id: Float
  level: Float
}

"""
order by stddev_samp() on columns of table "channel_tiers"
"""
input tiers_stddev_samp_order_by {
  id: order_by
  level: order_by
}

"""aggregate sum on columns"""
type tiers_sum_fields {
  id: Int
  level: Int
}

"""
order by sum() on columns of table "channel_tiers"
"""
input tiers_sum_order_by {
  id: order_by
  level: order_by
}

"""
update columns of table "channel_tiers"
"""
enum tiers_update_column {
  """column name"""
  channel_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  level

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type tiers_var_pop_fields {
  id: Float
  level: Float
}

"""
order by var_pop() on columns of table "channel_tiers"
"""
input tiers_var_pop_order_by {
  id: order_by
  level: order_by
}

"""aggregate var_samp on columns"""
type tiers_var_samp_fields {
  id: Float
  level: Float
}

"""
order by var_samp() on columns of table "channel_tiers"
"""
input tiers_var_samp_order_by {
  id: order_by
  level: order_by
}

"""aggregate variance on columns"""
type tiers_variance_fields {
  id: Float
  level: Float
}

"""
order by variance() on columns of table "channel_tiers"
"""
input tiers_variance_order_by {
  id: order_by
  level: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "user_unlocked_posts"
"""
type user_unlocked_posts {
  created_at: timestamp!
  id: Int!

  """An object relationship"""
  post: posts!
  post_id: uuid!
  updated_at: timestamp!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "user_unlocked_posts"
"""
type user_unlocked_posts_aggregate {
  aggregate: user_unlocked_posts_aggregate_fields
  nodes: [user_unlocked_posts!]!
}

"""
aggregate fields of "user_unlocked_posts"
"""
type user_unlocked_posts_aggregate_fields {
  avg: user_unlocked_posts_avg_fields
  count(columns: [user_unlocked_posts_select_column!], distinct: Boolean): Int!
  max: user_unlocked_posts_max_fields
  min: user_unlocked_posts_min_fields
  stddev: user_unlocked_posts_stddev_fields
  stddev_pop: user_unlocked_posts_stddev_pop_fields
  stddev_samp: user_unlocked_posts_stddev_samp_fields
  sum: user_unlocked_posts_sum_fields
  var_pop: user_unlocked_posts_var_pop_fields
  var_samp: user_unlocked_posts_var_samp_fields
  variance: user_unlocked_posts_variance_fields
}

"""
order by aggregate values of table "user_unlocked_posts"
"""
input user_unlocked_posts_aggregate_order_by {
  avg: user_unlocked_posts_avg_order_by
  count: order_by
  max: user_unlocked_posts_max_order_by
  min: user_unlocked_posts_min_order_by
  stddev: user_unlocked_posts_stddev_order_by
  stddev_pop: user_unlocked_posts_stddev_pop_order_by
  stddev_samp: user_unlocked_posts_stddev_samp_order_by
  sum: user_unlocked_posts_sum_order_by
  var_pop: user_unlocked_posts_var_pop_order_by
  var_samp: user_unlocked_posts_var_samp_order_by
  variance: user_unlocked_posts_variance_order_by
}

"""
input type for inserting array relation for remote table "user_unlocked_posts"
"""
input user_unlocked_posts_arr_rel_insert_input {
  data: [user_unlocked_posts_insert_input!]!

  """on conflict condition"""
  on_conflict: user_unlocked_posts_on_conflict
}

"""aggregate avg on columns"""
type user_unlocked_posts_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "user_unlocked_posts". All fields are combined with a logical 'AND'.
"""
input user_unlocked_posts_bool_exp {
  _and: [user_unlocked_posts_bool_exp!]
  _not: user_unlocked_posts_bool_exp
  _or: [user_unlocked_posts_bool_exp!]
  created_at: timestamp_comparison_exp
  id: Int_comparison_exp
  post: posts_bool_exp
  post_id: uuid_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_unlocked_posts"
"""
enum user_unlocked_posts_constraint {
  """unique or primary key constraint"""
  user_unlocked_posts_pk

  """unique or primary key constraint"""
  user_unlocked_posts_post_id_user_id_key
}

"""
input type for incrementing numeric columns in table "user_unlocked_posts"
"""
input user_unlocked_posts_inc_input {
  id: Int
}

"""
input type for inserting data into table "user_unlocked_posts"
"""
input user_unlocked_posts_insert_input {
  created_at: timestamp
  id: Int
  post: posts_obj_rel_insert_input
  post_id: uuid
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_unlocked_posts_max_fields {
  created_at: timestamp
  id: Int
  post_id: uuid
  updated_at: timestamp
  user_id: uuid
}

"""
order by max() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_max_order_by {
  created_at: order_by
  id: order_by
  post_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_unlocked_posts_min_fields {
  created_at: timestamp
  id: Int
  post_id: uuid
  updated_at: timestamp
  user_id: uuid
}

"""
order by min() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_min_order_by {
  created_at: order_by
  id: order_by
  post_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_unlocked_posts"
"""
type user_unlocked_posts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_unlocked_posts!]!
}

"""
on conflict condition type for table "user_unlocked_posts"
"""
input user_unlocked_posts_on_conflict {
  constraint: user_unlocked_posts_constraint!
  update_columns: [user_unlocked_posts_update_column!]! = []
  where: user_unlocked_posts_bool_exp
}

"""Ordering options when selecting data from "user_unlocked_posts"."""
input user_unlocked_posts_order_by {
  created_at: order_by
  id: order_by
  post: posts_order_by
  post_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_unlocked_posts"""
input user_unlocked_posts_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_unlocked_posts"
"""
enum user_unlocked_posts_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "user_unlocked_posts"
"""
input user_unlocked_posts_set_input {
  created_at: timestamp
  id: Int
  post_id: uuid
  updated_at: timestamp
  user_id: uuid
}

"""aggregate stddev on columns"""
type user_unlocked_posts_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type user_unlocked_posts_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type user_unlocked_posts_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type user_unlocked_posts_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_sum_order_by {
  id: order_by
}

"""
update columns of table "user_unlocked_posts"
"""
enum user_unlocked_posts_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type user_unlocked_posts_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type user_unlocked_posts_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type user_unlocked_posts_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "user_unlocked_posts"
"""
input user_unlocked_posts_variance_order_by {
  id: order_by
}

"""
columns and relationships of "user_accounts"
"""
type users {
  """An array relationship"""
  blocked_by_users(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): [blocklists!]!

  """An aggregate relationship"""
  blocked_by_users_aggregate(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): blocklists_aggregate!

  """An array relationship"""
  blocked_users(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): [blocklists!]!

  """An aggregate relationship"""
  blocked_users_aggregate(
    """distinct select on columns"""
    distinct_on: [blocklists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocklists_order_by!]

    """filter the rows returned"""
    where: blocklists_bool_exp
  ): blocklists_aggregate!

  """An array relationship"""
  channels(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): [channels!]!

  """An aggregate relationship"""
  channels_aggregate(
    """distinct select on columns"""
    distinct_on: [channels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channels_order_by!]

    """filter the rows returned"""
    where: channels_bool_exp
  ): channels_aggregate!
  created_at: timestamp!
  display_name: String

  """An array relationship"""
  emails(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): [emails!]!

  """An aggregate relationship"""
  emails_aggregate(
    """distinct select on columns"""
    distinct_on: [emails_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [emails_order_by!]

    """filter the rows returned"""
    where: emails_bool_exp
  ): emails_aggregate!
  id: uuid!

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!

  """An object relationship"""
  role: roles!
  role_id: uuid!

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """An array relationship"""
  unlocked_posts(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): [user_unlocked_posts!]!

  """An aggregate relationship"""
  unlocked_posts_aggregate(
    """distinct select on columns"""
    distinct_on: [user_unlocked_posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_unlocked_posts_order_by!]

    """filter the rows returned"""
    where: user_unlocked_posts_bool_exp
  ): user_unlocked_posts_aggregate!
  updated_at: timestamp!
  username: String!
}

"""
aggregated selection of "user_accounts"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "user_accounts"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "user_accounts"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "user_accounts"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "user_accounts". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  blocked_by_users: blocklists_bool_exp
  blocked_users: blocklists_bool_exp
  channels: channels_bool_exp
  created_at: timestamp_comparison_exp
  display_name: String_comparison_exp
  emails: emails_bool_exp
  id: uuid_comparison_exp
  posts: posts_bool_exp
  role: roles_bool_exp
  role_id: uuid_comparison_exp
  subscriptions: subscriptions_bool_exp
  unlocked_posts: user_unlocked_posts_bool_exp
  updated_at: timestamp_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "user_accounts"
"""
enum users_constraint {
  """unique or primary key constraint"""
  user_accounts_pk

  """unique or primary key constraint"""
  user_accounts_username_key
}

"""
input type for inserting data into table "user_accounts"
"""
input users_insert_input {
  blocked_by_users: blocklists_arr_rel_insert_input
  blocked_users: blocklists_arr_rel_insert_input
  channels: channels_arr_rel_insert_input
  created_at: timestamp
  display_name: String
  emails: emails_arr_rel_insert_input
  id: uuid
  posts: posts_arr_rel_insert_input
  role: roles_obj_rel_insert_input
  role_id: uuid
  subscriptions: subscriptions_arr_rel_insert_input
  unlocked_posts: user_unlocked_posts_arr_rel_insert_input
  updated_at: timestamp
  username: String
}

"""aggregate max on columns"""
type users_max_fields {
  created_at: timestamp
  display_name: String
  id: uuid
  role_id: uuid
  updated_at: timestamp
  username: String
}

"""
order by max() on columns of table "user_accounts"
"""
input users_max_order_by {
  created_at: order_by
  display_name: order_by
  id: order_by
  role_id: order_by
  updated_at: order_by
  username: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  created_at: timestamp
  display_name: String
  id: uuid
  role_id: uuid
  updated_at: timestamp
  username: String
}

"""
order by min() on columns of table "user_accounts"
"""
input users_min_order_by {
  created_at: order_by
  display_name: order_by
  id: order_by
  role_id: order_by
  updated_at: order_by
  username: order_by
}

"""
response of any mutation on the table "user_accounts"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "user_accounts"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "user_accounts"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "user_accounts"."""
input users_order_by {
  blocked_by_users_aggregate: blocklists_aggregate_order_by
  blocked_users_aggregate: blocklists_aggregate_order_by
  channels_aggregate: channels_aggregate_order_by
  created_at: order_by
  display_name: order_by
  emails_aggregate: emails_aggregate_order_by
  id: order_by
  posts_aggregate: posts_aggregate_order_by
  role: roles_order_by
  role_id: order_by
  subscriptions_aggregate: subscriptions_aggregate_order_by
  unlocked_posts_aggregate: user_unlocked_posts_aggregate_order_by
  updated_at: order_by
  username: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_accounts"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  role_id

  """column name"""
  updated_at

  """column name"""
  username
}

"""
input type for updating data in table "user_accounts"
"""
input users_set_input {
  created_at: timestamp
  display_name: String
  id: uuid
  role_id: uuid
  updated_at: timestamp
  username: String
}

"""
update columns of table "user_accounts"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  role_id

  """column name"""
  updated_at

  """column name"""
  username
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

