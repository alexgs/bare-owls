// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  previewFeatures = ["namedConstraints"]
  provider = "prisma-client-js"
}

model Channel {
  id          String                @id
  name        String                @unique
  title       String
  owner       UserAccount           @relation(fields: [ownerId], references: [id])
  ownerId     String
  subscribers ChannelSubscription[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model ChannelSubscription {
  id        Int         @id @default(autoincrement())
  channel   Channel     @relation(fields: [channelId], references: [id])
  channelId String
  user      UserAccount @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Session {
  id          String      @id
  displayName String
  data        Json?
  email       String
  expires     DateTime
  account     UserAccount @relation(fields: [accountId], references: [id])
  accountId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index(fields: [accountId], name: "Session.accountId_index")
}

model UserAccount {
  id            String                @id
  username      String                @unique
  displayName   String?
  role          UserRole              @relation(fields: [roleId], references: [id])
  channel       Channel?
  subscriptions ChannelSubscription[]
  emails        UserEmail[]
  sessions      Session[]
  tokens        UserOpenIdToken[]
  blockTargets  UserBlock[]           @relation("Blocker")
  blockedBy     UserBlock[]           @relation("BlockedBy")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  roleId        String
}

// The `blocker` is the person doing the block, and the `target` is the person
// getting blocked. In other words, the `target` is blocked by the `blocker`.
model UserBlock {
  id        Int         @id @default(autoincrement())
  blocker   UserAccount @relation("Blocker", fields: [blockerId], references: [id])
  blockerId String
  target    UserAccount @relation("BlockedBy", fields: [targetId], references: [id])
  targetId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserEmail {
  id         Int         @id @default(autoincrement())
  original   String      @unique
  simplified String
  account    UserAccount @relation(fields: [accountId], references: [id])
  accountId  String
  verified   Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index(fields: [simplified], name: "UserEmail.simplified_index")
}

model UserOpenIdToken {
  id            String       @id
  sub           String       @unique
  iss           String
  aud           String
  exp           DateTime
  iat           DateTime
  email         String?
  emailVerified Boolean      @default(false)
  name          String?
  nickname      String?
  account       UserAccount? @relation(fields: [accountId], references: [id])
  accountId     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserRole {
  id          String        @id
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserAccount[]
}
