// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  previewFeatures = ["namedConstraints"]
  provider        = "prisma-client-js"
}

model Channel {
  id          String                @id @default(uuid()) @db.Uuid
  slug        String                @unique
  title       String
  owner       UserAccount           @relation(fields: [ownerId], references: [id])
  ownerId     String                @db.Uuid
  subscribers ChannelSubscription[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  posts       Post[]
}

model ChannelSubscription {
  id        Int         @id @default(autoincrement())
  channel   Channel     @relation(fields: [channelId], references: [id])
  channelId String      @db.Uuid
  user      UserAccount @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([channelId, userId])
}

model Post {
  id          String      @id @default(uuid()) @db.Uuid
  publicId    String      @db.VarChar(5)
  posttype    PostType    @relation(fields: [postTypeId], references: [name])
  postTypeId  String
  channel     Channel     @relation(fields: [channelId], references: [id])
  channelId   String      @db.Uuid
  author      UserAccount @relation(fields: [authorId], references: [id])
  authorId    String      @db.Uuid
  createdAt   DateTime    @default(now())
  publishedAt DateTime
  updatedAt   DateTime    @updatedAt

  UserUnlockedPost UserUnlockedPost[]
  @@unique([channelId, publicId])
}

// This table doesn't use an `id` field so that its column names are consistent
// with UserRole, which also acts as an enumerable data type.
model PostType {
  name        String   @id
  displayName String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model UserAccount {
  id            String                @id @default(uuid()) @db.Uuid
  username      String                @unique
  displayName   String?
  role          UserRole              @relation(fields: [roleId], references: [id])
  channel       Channel?
  subscriptions ChannelSubscription[]
  emails        UserEmail[]
  blockTargets  UserBlock[]           @relation("Blocker")
  blockedBy     UserBlock[]           @relation("BlockedBy")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  roleId        String                @db.Uuid
  posts         Post[]
  unlockedPosts UserUnlockedPost[]
}

// The `blocker` is the person doing the block, and the `target` is the person
// getting blocked. In other words, the `target` is blocked by the `blocker`.
model UserBlock {
  id        Int         @id @default(autoincrement())
  blocker   UserAccount @relation("Blocker", fields: [blockerId], references: [id])
  blockerId String      @db.Uuid
  target    UserAccount @relation("BlockedBy", fields: [targetId], references: [id])
  targetId  String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserEmail {
  id         Int         @id @default(autoincrement())
  original   String      @unique
  simplified String
  account    UserAccount @relation(fields: [accountId], references: [id])
  accountId  String      @db.Uuid
  verified   Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index(fields: [simplified], name: "UserEmail.simplified_index")
}

model UserRole {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @unique
  displayName String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserAccount[]
}

// Unlocked posts for PPV content
model UserUnlockedPost {
  id        Int         @id @default(autoincrement())
  user      UserAccount @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  post      Post        @relation(fields: [postId], references: [id])
  postId    String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([postId, userId])
}
